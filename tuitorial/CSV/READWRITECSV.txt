///////////////////////////
//write csv file, run this on node.js


// This script demonstrates how to save an array of objects as a CSV file
// using Node.js's 'fs' (File System) module.

const fs = require('fs');
const path = require('path');

// Example data: an array of objects
const data = [
  { id: 1, name: 'Alice', email: 'alice@example.com' },
  { id: 2, name: 'Bob', email: 'bob@example.com' },
  { id: 3, name: 'Charlie', email: 'charlie@example.com' }
];

// Define the output file path and name
const filePath = path.join(__dirname, 'users.csv');

/**
 * Converts an array of objects to a CSV string.
 * @param {Array<Object>} arr The array to convert.
 * @returns {string} The CSV formatted string.
 */
function convertToCsv(arr) {
  if (arr.length === 0) {
    return '';
  }

  // Get the headers from the first object's keys
  const headers = Object.keys(arr[0]).join(',');
  
  // Map each object to a string of its values, then join with newlines
  const rows = arr.map(obj => Object.values(obj).join(',')).join('\n');
  
  // Combine the headers and the rows
  return `${headers}\n${rows}`;
}

const csvString = convertToCsv(data);

// Use fs.writeFile to save the file
// The asynchronous method is preferred to avoid blocking the main thread.
fs.writeFile(filePath, csvString, 'utf8', (err) => {
  if (err) {
    console.error('An error occurred while writing the file:', err);
    return;
  }
  
  console.log('CSV file has been saved successfully!');
  console.log(`File location: ${filePath}`);
});


/////////////////////////////
//read csv file run this on node.js

// This script demonstrates how to read and parse a CSV file
// using Node.js's 'fs' (File System) module.

const fs = require('fs');
const path = require('path');

// Define the file path to read.
// This assumes a 'users.csv' file exists in the same directory as this script.
const filePath = path.join(__dirname, 'users.csv');

/**
 * Parses a CSV string and returns an array of objects.
 * @param {string} csvString The content of the CSV file.
 * @returns {Array<Object>} An array where each object represents a row.
 */
function parseCsv(csvString) {
  // Split the string into lines (rows)
  const lines = csvString.trim().split('\n');
  
  // Get the headers from the first line and split by commas
  const headers = lines[0].split(',');

  // Process the remaining lines (data)
  const data = lines.slice(1).map(line => {
    const values = line.split(',');
    const obj = {};
    
    // Map header names to values for each object
    for (let i = 0; i < headers.length; i++) {
      obj[headers[i].trim()] = values[i].trim();
    }
    
    return obj;
  });

  return data;
}

// Read the file asynchronously
fs.readFile(filePath, 'utf8', (err, data) => {
  if (err) {
    console.error('An error occurred while reading the file:', err);
    return;
  }
  
  try {
    const parsedData = parseCsv(data);
    console.log('CSV file parsed successfully!');
    console.log(parsedData);
  } catch (parseError) {
    console.error('An error occurred while parsing the CSV:', parseError);
  }
});


