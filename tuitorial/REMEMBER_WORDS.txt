
ZAPIER


JS
arrow function =>  ( js )

arrays.map( arrow_function )

for (let x of list)

arrays.map( arrow_function)

try { } catch( ){ }

npm install prompt-sync 

Palos_Cabral@1  supaBase      Palos_Cabral@1

sa GitHub

git config --list  view the config
git add .     iadd lahat ng nasa folder
git init 
git commit -m "Initial commit"
git remote add origin https://github.com/<your-username>/<your-repo>.git depende sa site mo
git branch -M main
git push -u origin main

pag mag update sa github
git add .
git commit -m "Your message"
git push origin main


echo "# js_journey" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/sablaygaming-source/js_journey.git
git push -u origin main
â€¦or push an existing repository from the command line
git remote add origin https://github.com/sablaygaming-source/js_journey.git
git branch -M main
git push -u origin main


HOW TO PULL FROM GITHUB TO LOCAL DRIVE 
git pull --rebase origin main
# Resolve conflicts if needed, then push
git push origin main

REGULAR PULLING( from GitHub to local drive)
git pull origin main
git push origin main
git add <file-name>
git commit
git push origin main




const fs = require('fs').promises; // Use the Promise-based API for fs
const readline = require('readline');

// Setup the readline interface
const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

/**
 * Wraps rl.question in a Promise for use with async/await.
 */
function askQuestion(query) {
    return new Promise(resolve => rl.question(query, resolve));

}

async function main() {
    try {
        // --- 1. Get input asynchronously (using await) ---
        const userName = await askQuestion('Enter your name: ');
        const userAge = await askQuestion('Enter your age: ');

        const filePath = './async_output.csv';
        const csvContent = `Name,Age\n${userName},${userAge}`;
        console.log('\nInput received. Starting file write...');

        // --- 2. Use the asynchronous version (writeFile) with await ---
        // This ensures the write operation completes before the main function exits.
        await fs.writeFile(filePath, csvContent);
        
        console.log(`Successfully saved data to ${filePath}`);

    } catch (error) {
        console.error('An error occurred:', error.message);
    } finally {
        // Must close the readline interface to end the process
        rl.close(); 
    }
}

main();



..other use of data
  dataRows = data.map(obj => {
                    return `${obj.Name}, ${obj.Address}`;
                }).join('\n');
                const headers = 'Name, Address';

                dataInput = `${headers}\n${dataRows}`;


    console.log("u inputed ", data);
    //array of object to stringCSV
    const headers = Object.keys(data[0]).join(",");
    const rows = data.map(obj => Object.values(obj).join(",")).join("\n");

    subData = `${headers}\n${rows}`;
    console.log("\nresult data \n", subData);



////////////////
const fs = require('fs').promises; // 1. IMPORTANT: Use the Promise-based API
const fs_sync = require('fs');     // Need the synchronous API just for setup

const filePath = 'sample_data_async.txt';
const contentToWrite = 'This file read works correctly with await!';

// Create the file synchronously to ensure it exists for the read operation
fs_sync.writeFileSync(filePath, contentToWrite); 

/**
 * Reads a file and demonstrates the proper use of async/await.
 */
async function readFileCorrectly() {
    console.log('1. Starting file read...');
    
    try {
        // 2. 'await' now works because fs.readFile returns a Promise
        const data = await fs.readFile(filePath, 'utf8');
        
        // 3. This line only runs AFTER the file is fully read
        console.log('\n2. SUCCESS: Read operation completed.');
        console.log('File Content:', data);

    } catch (error) {
        // 4. Critical: A try...catch block is needed to handle errors like file not found
        console.error('\nERROR: Failed to read file.', error.message);
    }
}

// 5. CRITICAL: You must execute the async function to start the process!
readFileCorrectly();

console.log('3. Script continues running non-blocking tasks (like this console log).');

///////////////////////
data = [];
    data.push({ Name: "", Address: "" });
    data[0].Name = await inpStr("Name: ");
    data[0].Address = await inpStr("Address: ");

